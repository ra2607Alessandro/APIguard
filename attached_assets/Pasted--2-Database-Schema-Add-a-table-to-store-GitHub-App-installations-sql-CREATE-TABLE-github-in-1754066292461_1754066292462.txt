
### 2. Database Schema
Add a table to store GitHub App installations:
```sql
CREATE TABLE github_installations (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  installation_id INTEGER NOT NULL,
  account_login VARCHAR(255),
  account_type VARCHAR(50), -- 'User' or 'Organization'
  permissions JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

### 3. Install Required Package
Add the GitHub App SDK:
```bash
npm install @octokit/app
```

### 4. Update GitHub Service
Replace the current GitHubService class in `server/services/github.ts` to:
- Use @octokit/app for GitHub App functionality
- Support installation-specific Octokit instances
- Remove dependency on single GITHUB_TOKEN
- Add methods for installation management

### 5. GitHub App Installation Routes
Add these new API routes:
- `POST /api/github/installation` - Handle installation webhook
- `GET /api/github/installations` - List user's installations  
- `DELETE /api/github/installation/:id` - Handle uninstallation
- `GET /api/github/installation/:id/repositories` - List accessible repos

### 6. Update Repository Scanner
Modify `server/services/repositoryScanner.ts` to:
- Accept installation ID parameter
- Use installation-specific Octokit instance
- Remove dependency on global GITHUB_TOKEN

### 7. Frontend Integration
Add UI components for:
- GitHub App installation flow
- Display user's connected repositories
- Repository selection for monitoring
- Installation status management

### 8. Webhook Handler
Implement webhook endpoint to handle:
- Installation events
- Installation repository events  
- Permission changes

## Key Requirements
1. Each user must install the GitHub App on their repositories
2. Use installation tokens instead of personal access tokens
3. Store installation data per user in database
4. Maintain backward compatibility during migration
5. Proper error handling for missing installations
6. Security: validate webhook signatures

## Expected User Flow
1. User authenticates with GitHub OAuth (existing)
2. User installs GitHub App on their repositories (new)
3. App stores installation data (new)
4. User can scan their own private/public repos (new functionality)

## Files to Modify
- `server/services/github.ts` - Core GitHub service
- `server/services/repositoryScanner.ts` - Scanner service  
- `server/routes.ts` - Add installation routes
- `shared/schema.ts` - Add installation table
- Frontend components for installation UI

Please implement these changes while maintaining existing functionality and ensuring proper error handling throughout.