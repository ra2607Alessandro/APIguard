### Goal
Make GitHub App installation the only authentication path; remove all usage of the global personal token so any user can connect their GitHub account (incl. private repos) and create projects only after connecting.

### One-shot prompt for Replit (copy/paste)

Please apply the following edits exactly, in order. Use the specified files/sections and code blocks.

1) Secrets (Replit “Secrets”)
- Keep only:
  - GITHUB_APP_ID
  - GITHUB_PRIVATE_KEY (full PEM; newlines preserved)
  - DATABASE_URL
  - JWT_SECRET
  - TOKEN_ENCRYPTION_KEY (32-byte hex)
  - Optional: GITHUB_WEBHOOK_SECRET
- Do not use GITHUB_TOKEN or OAuth client id/secret for repo access. If present, leave defined but unused.

2) Storage helpers (list/delete user installations)
- File: `server/storage.ts` — add:

```ts
async getUserGitHubInstallations(userId: string) {
  return await db.select().from(github_app_installations)
    .where(eq(github_app_installations.user_id, userId));
}

async deleteUserGitHubInstallation(userId: string, installationId: number) {
  await db.delete(github_app_installations).where(and(
    eq(github_app_installations.user_id, userId),
    eq(github_app_installations.installation_id, installationId)
  ));
}
```

3) Fix installations API to use auth + correct table
- File: `server/routes.ts` — replace these endpoints:

```ts
// List installations for current user
app.get("/api/github/installations", authMiddleware, async (req: any, res) => {
  const installations = await storage.getUserGitHubInstallations(req.user.id);
  res.json(installations);
});

// Delete an installation owned by current user
app.delete("/api/github/installation/:id", authMiddleware, async (req: any, res) => {
  const installationId = parseInt(req.params.id);
  await storage.deleteUserGitHubInstallation(req.user.id, installationId);
  res.status(204).send();
});

// List repos of a specific installation
app.get("/api/github/installation/:id/repositories", authMiddleware, async (req: any, res) => {
  const installationId = parseInt(req.params.id);
  const repositories = await githubService.getInstallationRepositories(installationId);
  res.json(repositories);
});
```

- Ensure “Connect GitHub” returns a URL bound to the current user (already present):
```ts
app.get("/api/auth/github/install", authMiddleware, (req: any, res) => {
  const { githubAppService } = await import("./services/github-app");
  res.json({ installUrl: githubAppService.getInstallationURL(req.user.id) });
});
```

4) Remove global personal-token scanning
- File: `server/services/github-monitor.ts`
  - Delete the requirement and use of `process.env.GITHUB_TOKEN` and the global `this.octokit`.
  - Add a helper to retrieve an Octokit for the repo via the GitHub App:

```ts
import { githubService } from "./github";

private async getOctokitForRepo(userId: string, owner: string, repo: string) {
  // Find a user installation that can access this repo
  const userInstalls = await storage.getUserGitHubInstallations(userId);
  for (const inst of userInstalls) {
    const ok = await githubService.canAccessRepository(inst.installation_id, owner, repo);
    if (ok) return await githubService.getInstallationOctokit(inst.installation_id);
  }
  throw new Error(`No GitHub App installation can access ${owner}/${repo}`);
}
```

  - Use it wherever Octokit is needed. Minimal changes:

```ts
// In setupSourceMonitoring / ensureWebhook:
const octokit = await this.getOctokitForRepo(project.user_id, owner, repo);
const webhooks = await octokit.repos.listWebhooks({ owner, repo });
// ...

// In checkForChanges(...)
const octokit = await this.getOctokitForRepo(project.user_id, owner, repo);
const fileResponse = await octokit.repos.getContent({ owner, repo, path: source.source_path, ref: commitSha || 'main' });
```

  - If `RepositoryScanner` is used, let it accept an Octokit instance:

- File: `server/services/repositoryScanner.ts` — update constructor to support both token or Octokit:
```ts
constructor(octokitOrToken: string | Octokit) {
  this.octokit = typeof octokitOrToken === 'string' ? new Octokit({ auth: octokitOrToken }) : octokitOrToken;
  this.llmDetector = new LLMSpecDetector();
}
```
Then, in `GitHubMonitor`, create it once per run with the installation Octokit:
```ts
const octokit = await this.getOctokitForRepo(project.user_id, owner, repo);
this.repositoryScanner = new RepositoryScanner(octokit);
```

- File: `server/routes.ts` — remove/disable any code that constructs `RepositoryScanner(process.env.GITHUB_TOKEN!)`. Either delete those endpoints or switch them to the installation-based flow only (e.g., `POST /api/discovery/repository-with-installation`).

- File: `server/routes.ts` — update health/status strings to not read `GITHUB_TOKEN`.

5) Enforce “connect before create project”
- File: `client/src/components/navigation.tsx`
```diff
- { path: "/github/connect", label: "GitHub", icon: Github },
+ { path: "/integrations", label: "GitHub", icon: Github },
```

- File: `client/src/pages/integrations.tsx`
  - Ensure delete uses auth only (remove `?userId=default-user`):
```diff
- fetch(`/api/github/installation/${installationId}?userId=default-user`, { method: 'DELETE', ... })
+ fetch(`/api/github/installation/${installationId}`, { method: 'DELETE', ... })
```

- In the “New Project” flow (wherever project creation starts), block UI if `/api/auth/github` returns `hasInstallation:false`. Render a single CTA “Connect GitHub Account” that calls `/api/auth/github/install` and redirects.

6) Database
- Run migrations to ensure `github_app_installations` exists:
  - Replit Shell: `npm run db:push`

7) Webhook (optional but recommended)
- Configure your GitHub App webhook to `https://<replit-domain>/api/github/webhook`.
- Set `GITHUB_WEBHOOK_SECRET` in Replit and validate signature inside the webhook handler.

8) Remove legacy GitHub page and OAuth
- Safe-delete `client/src/pages/github-connect.tsx` and any route pointing to it.
- Do not use OAuth token storage for repo access; it is not needed for the App-installation flow.

9) Acceptance checklist
- Connect flow: “Connect GitHub Account” → GitHub → back to `/integrations` with installation listed.
- GET `/api/github/installation/:id/repositories` returns private repos of the connected account/org.
- Project creation is disabled until at least one installation exists.
- Monitoring scans and webhooks work using installation tokens; no code reads `process.env.GITHUB_TOKEN`.

10) Quick verification logs
- On connect: expect server logs for `/api/auth/github/install` then `/api/auth/github/setup` then `saveUserGitHubInstallation(user, installation_id)`.
- On repo listing: expect installation token–based REST calls, not `GITHUB_TOKEN` references anywhere.

If any step fails, post the exact server logs for the failing API call and I’ll provide the minimal delta.